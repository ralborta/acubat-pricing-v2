// PDF DIRECTO A EXCEL - SIMPLE Y EFECTIVO
// GPT-4o lee el PDF y genera Excel directamente

import { NextRequest, NextResponse } from 'next/server';
import * as XLSX from 'xlsx';

interface ProductoExtraido {
  codigo?: string;
  descripcion?: string;
  precio?: number;
  stock?: number;
  unidad?: string;
  categoria?: string;
}

// ============================================
// EXTRACCI√ìN DIRECTA CON GPT-4o
// ============================================

async function procesarPDFConGPT4o(pdfBuffer: Buffer, nombreArchivo: string): Promise<ProductoExtraido[]> {
  console.log('ü§ñ Procesando PDF directamente con GPT-4o...');
  
  if (!process.env.OPENAI_API_KEY) {
    throw new Error('OPENAI_API_KEY no configurada');
  }
  
  const OpenAI = require('openai');
  const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY
  });
  
  try {
    // Convertir PDF a base64 para env√≠o
    const pdfBase64 = pdfBuffer.toString('base64');
    
    const response = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        {
          role: "user",
          content: [
            {
              type: "text",
              text: `INSTRUCCIONES ESPEC√çFICAS:
Analiza este PDF y extrae TODOS los productos/items de las tablas que encuentres.

FORMATO DE RESPUESTA (JSON v√°lido):
{
  "productos": [
    {
      "codigo": "ABC123",
      "descripcion": "Descripci√≥n del producto",
      "precio": 123.45,
      "stock": 10,
      "unidad": "UN",
      "categoria": "Categor√≠a si existe"
    }
  ],
  "resumen": {
    "totalProductos": 0,
    "paginas": 0,
    "tablas": 0
  }
}

REGLAS IMPORTANTES:
1. Solo extraer datos que est√©n claramente visibles en tablas
2. Si un campo no existe, omitirlo del JSON
3. Precios como n√∫meros (sin s√≠mbolos monetarios)
4. Stock como n√∫meros enteros
5. C√≥digos en may√∫sculas
6. Responder SOLO con JSON v√°lido, sin texto adicional

PROCESAR:`
            },
            {
              type: "image_url",
              image_url: {
                url: `data:application/pdf;base64,${pdfBase64}`
              }
            }
          ]
        }
      ],
      max_tokens: 4000,
      temperature: 0.1
    });
    
    const contenido = response.choices[0].message.content;
    console.log('üìã Respuesta de GPT-4o recibida');
    
    // Parsear JSON de respuesta
    if (!contenido) {
      throw new Error('GPT-4o no devolvi√≥ contenido');
    }
    
    // Limpiar la respuesta para extraer solo el JSON
    const jsonMatch = contenido.match(/\{[\s\S]*\}/);
    if (!jsonMatch) {
      console.error('Respuesta no contiene JSON v√°lido:', contenido);
      throw new Error('GPT-4o no devolvi√≥ JSON v√°lido');
    }
    
    const resultado = JSON.parse(jsonMatch[0]);
    
    if (!resultado.productos || !Array.isArray(resultado.productos)) {
      throw new Error('Respuesta no contiene array de productos');
    }
    
    console.log(`‚úÖ GPT-4o extrajo ${resultado.productos.length} productos`);
    console.log(`üìä Resumen: ${resultado.resumen?.totalProductos || 0} productos, ${resultado.resumen?.paginas || 0} p√°ginas`);
    
    return resultado.productos;
    
  } catch (error) {
    console.error('‚ùå Error en GPT-4o:', error instanceof Error ? error.message : String(error));
    throw new Error(`GPT-4o fall√≥: ${error instanceof Error ? error.message : 'Error desconocido'}`);
  }
}

// ============================================
// GENERADOR DE EXCEL DIRECTO
// ============================================

function generarExcelDirecto(productos: ProductoExtraido[], nombreArchivo: string, costo: number): Buffer {
  console.log('üìä Generando Excel...');
  
  const workbook = XLSX.utils.book_new();
  
  if (productos.length === 0) {
    // Hoja de error
    const errorData = [
      ['RESULTADO', 'Sin productos encontrados'],
      ['ARCHIVO', nombreArchivo],
      ['FECHA', new Date().toLocaleString('es-ES')],
      ['COSTO', `$${costo.toFixed(3)}`],
      [''],
      ['POSIBLES CAUSAS:'],
      ['‚Ä¢ El PDF no contiene tablas de productos'],
      ['‚Ä¢ Las tablas no est√°n bien estructuradas'],
      ['‚Ä¢ El PDF es de muy baja calidad'],
      ['‚Ä¢ El contenido no es reconocible como productos'],
      [''],
      ['SOLUCIONES:'],
      ['‚Ä¢ Verificar que el PDF contenga tablas claras'],
      ['‚Ä¢ Usar PDFs con mejor calidad de imagen'],
      ['‚Ä¢ Asegurar que las tablas tengan encabezados'],
      ['‚Ä¢ Probar con un PDF m√°s simple primero']
    ];
    
    const worksheet = XLSX.utils.aoa_to_sheet(errorData);
    XLSX.utils.book_append_sheet(workbook, worksheet, 'Sin Datos');
  } else {
    // Hoja principal con productos
    const worksheet = XLSX.utils.json_to_sheet(productos);
    
    // Configurar anchos de columna
    worksheet['!cols'] = [
      { wch: 12 }, // codigo
      { wch: 45 }, // descripcion
      { wch: 12 }, // precio
      { wch: 8 },  // stock
      { wch: 10 }, // unidad
      { wch: 15 }  // categoria
    ];
    
    // Formato de encabezados
    if (worksheet['!ref']) {
      const range = XLSX.utils.decode_range(worksheet['!ref']);
      for (let col = range.s.c; col <= range.e.c; col++) {
        const cellAddr = XLSX.utils.encode_cell({ r: 0, c: col });
        if (worksheet[cellAddr]) {
          worksheet[cellAddr].s = {
            font: { bold: true, color: { rgb: "FFFFFF" } },
            fill: { fgColor: { rgb: "4472C4" } }
          };
        }
      }
    }
    
    XLSX.utils.book_append_sheet(workbook, worksheet, 'Productos');
    
    // Hoja de resumen
    const resumenData = [
      ['RESUMEN DE EXTRACCI√ìN'],
      [''],
      ['Archivo procesado:', nombreArchivo],
      ['Fecha y hora:', new Date().toLocaleString('es-ES')],
      ['M√©todo:', 'GPT-4o directo'],
      ['Costo de procesamiento:', `$${costo.toFixed(3)}`],
      [''],
      ['ESTAD√çSTICAS'],
      ['Total productos:', productos.length],
      ['Con c√≥digo:', productos.filter(p => p.codigo).length],
      ['Con descripci√≥n:', productos.filter(p => p.descripcion).length],
      ['Con precio:', productos.filter(p => p.precio !== undefined).length],
      ['Con stock:', productos.filter(p => p.stock !== undefined).length],
      ['Con unidad:', productos.filter(p => p.unidad).length],
      ['Con categor√≠a:', productos.filter(p => p.categoria).length],
      [''],
      ['AN√ÅLISIS DE PRECIOS'],
      productos.filter(p => p.precio).length > 0 ? ['Precio m√≠nimo:', Math.min(...productos.filter(p => p.precio).map(p => p.precio!))] : ['Precio m√≠nimo:', 'N/A'],
      productos.filter(p => p.precio).length > 0 ? ['Precio m√°ximo:', Math.max(...productos.filter(p => p.precio).map(p => p.precio!))] : ['Precio m√°ximo:', 'N/A'],
      productos.filter(p => p.precio).length > 0 ? ['Precio promedio:', (productos.filter(p => p.precio).reduce((sum, p) => sum + p.precio!, 0) / productos.filter(p => p.precio).length).toFixed(2)] : ['Precio promedio:', 'N/A'],
      [''],
      ['AN√ÅLISIS DE STOCK'],
      productos.filter(p => p.stock !== undefined).length > 0 ? ['Stock total:', productos.filter(p => p.stock !== undefined).reduce((sum, p) => sum + p.stock!, 0)] : ['Stock total:', 'N/A'],
      ['Productos sin stock:', productos.filter(p => p.stock === 0).length],
      [''],
      ['CATEGOR√çAS DETECTADAS'],
      ...Array.from(new Set(productos.filter(p => p.categoria).map(p => p.categoria)))
        .slice(0, 10)
        .map(cat => ['', cat]),
      [''],
      ['VENTAJAS DE GPT-4o DIRECTO'],
      ['‚úÖ Lee PDFs nativamente como ChatGPT'],
      ['‚úÖ No requiere conversi√≥n a im√°genes'],
      ['‚úÖ Comprende estructura de documentos'],
      ['‚úÖ Extracci√≥n m√°s precisa y completa'],
      ['‚úÖ Menor costo computacional'],
      ['‚úÖ Procesamiento m√°s r√°pido'],
      ['‚úÖ Compatible 100% con Vercel']
    ];
    
    const worksheetResumen = XLSX.utils.aoa_to_sheet(resumenData);
    XLSX.utils.book_append_sheet(workbook, worksheetResumen, 'Resumen');
  }
  
  return XLSX.write(workbook, { 
    type: 'buffer', 
    bookType: 'xlsx',
    compression: true 
  });
}

// ============================================
// API ROUTE SIMPLIFICADO
// ============================================

export async function POST(request: NextRequest) {
  const inicio = Date.now();
  
  try {
    console.log('üöÄ Iniciando conversi√≥n directa PDF ‚Üí Excel...');
    
    const formData = await request.formData();
    const file = formData.get('file') as File;
    
    if (!file) {
      return NextResponse.json(
        { success: false, error: 'No se proporcion√≥ archivo PDF' },
        { status: 400 }
      );
    }
    
    if (!file.type.includes('pdf')) {
      return NextResponse.json(
        { success: false, error: 'Solo archivos PDF son soportados' },
        { status: 400 }
      );
    }
    
    if (file.size > 20 * 1024 * 1024) { // 20MB l√≠mite para GPT-4o
      return NextResponse.json(
        { success: false, error: 'Archivo muy grande (m√°ximo 20MB)' },
        { status: 400 }
      );
    }
    
    console.log(`üìÑ Procesando: ${file.name} (${(file.size / 1024 / 1024).toFixed(2)}MB)`);
    
    const arrayBuffer = await file.arrayBuffer();
    const pdfBuffer = Buffer.from(arrayBuffer);
    
    // Estimaci√≥n de costo (GPT-4o es m√°s econ√≥mico que GPT-4V)
    const costoEstimado = Math.max(0.01, (file.size / (1024 * 1024)) * 0.005); // ~$0.005 por MB
    
    console.log(`üí∞ Costo estimado: $${costoEstimado.toFixed(3)}`);
    
    // Procesar PDF directamente con GPT-4o
    const productos = await procesarPDFConGPT4o(pdfBuffer, file.name);
    
    // Generar Excel
    const excelBuffer = generarExcelDirecto(productos, file.name, costoEstimado);
    const excelBase64 = excelBuffer.toString('base64');
    
    const tiempoTotal = Date.now() - inicio;
    
    console.log(`‚úÖ Conversi√≥n completada en ${tiempoTotal}ms`);
    console.log(`üìä Resultado: ${productos.length} productos extra√≠dos`);
    
    return NextResponse.json({
      success: true,
      excel: excelBase64,
      estadisticas: {
        tiempoProcesamiento: `${tiempoTotal}ms`,
        productosExtraidos: productos.length,
        conCodigo: productos.filter(p => p.codigo).length,
        conPrecio: productos.filter(p => p.precio !== undefined).length,
        conStock: productos.filter(p => p.stock !== undefined).length,
        conCategoria: productos.filter(p => p.categoria).length,
        metodo: 'GPT-4o directo',
        archivoTama√±o: `${(file.size / 1024 / 1024).toFixed(2)}MB`
      },
      costos: {
        esteDocumento: `$${costoEstimado.toFixed(3)}`,
        mensual30docs: `$${(costoEstimado * 30).toFixed(2)}`
      },
      nombreSugerido: file.name.replace('.pdf', '_extraido_gpt4o.xlsx'),
      mensaje: productos.length > 0 
        ? `üéØ ${productos.length} productos extra√≠dos con GPT-4o (Costo: $${costoEstimado.toFixed(3)})`
        : `‚ö†Ô∏è No se encontraron productos en el PDF (Costo: $${costoEstimado.toFixed(3)})`,
      ventajas: [
        'Lectura nativa de PDF como ChatGPT',
        'Sin conversi√≥n a im√°genes',
        'Comprensi√≥n de estructura completa',
        'Extracci√≥n m√°s precisa',
        'Menor costo que GPT-4V'
      ]
    });
    
  } catch (error) {
    const tiempoError = Date.now() - inicio;
    console.error('‚ùå Error:', error);
    
    return NextResponse.json(
      {
        success: false,
        error: error instanceof Error ? error.message : 'Error procesando PDF',
        tiempoProcesamiento: `${tiempoError}ms`,
        solucion: 'Verificar API key de OpenAI y formato del PDF'
      },
      { status: 500 }
    );
  }
}

export async function GET() {
  return NextResponse.json({
    service: 'PDF to Excel - GPT-4o Direct',
    version: '11.0.0 - Native PDF Reading',
    descripcion: 'Convierte PDF a Excel usando GPT-4o nativamente como ChatGPT',
    ventajas: [
      'Lee PDFs directamente (como ChatGPT)',
      'No requiere conversi√≥n a im√°genes',
      'Comprende estructura de documentos',
      'M√°s econ√≥mico que GPT-4V',
      'M√°s r√°pido y preciso',
      'Compatible 100% con Vercel'
    ],
    costos: {
      porDocumento: '$0.005-$0.02',
      mensual30docs: '$0.15-$0.60'
    },
    limitaciones: [
      'Requiere OPENAI_API_KEY',
      'M√°ximo 20MB por PDF',
      'Depende de la claridad del PDF'
    ]
  });
}