const XLSX = require('xlsx');
const OpenAI = require('openai');

console.log('üîç TEST CASO PROBLEM√ÅTICO - Simulando cuando la IA devuelve c√≥digo como precio...\n');

try {
  // Leer el archivo Excel
  const workbook = XLSX.readFile('./archivo_analisis.xlsx');
  const worksheet = workbook.Sheets['LISTA DE PRECIOS HM N¬∞9'];
  
  // Convertir a JSON
  const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
  
  // Encontrar headers (fila 2)
  const headers = jsonData[1]; // Fila 2 (√≠ndice 1)
  console.log('üìã Headers encontrados:', headers);
  
  // Obtener datos de muestra (primeras 10 filas de datos)
  const datos = jsonData.slice(2, 12); // Filas 3-12 (10 filas de datos)
  console.log('üìä Datos de muestra (10 filas):', datos);
  
  // ============================================================================
  // SIMULAR EL CASO PROBLEM√ÅTICO: IA devuelve c√≥digo como precio
  // ============================================================================
  console.log('\nü§ñ === SIMULANDO CASO PROBLEM√ÅTICO ===');
  
  // Simular que la IA devuelve c√≥digo como precio (caso problem√°tico)
  const mapeoProblematico = {
    tipo: 'RUBRO',
    modelo: 'CODIGO', 
    precio_ars: 'CODIGO', // ‚Üê PROBLEMA: IA devuelve c√≥digo como precio
    descripcion: 'DESCRIPCION',
    proveedor: 'MARCA'
  };
  
  console.log('üß† Mapeo problem√°tico de la IA:', mapeoProblematico);
  
  // ============================================================================
  // SIMULAR LA VALIDACI√ìN AGRESIVA DEL C√ìDIGO DE PRODUCCI√ìN
  // ============================================================================
  console.log('\nüîç === SIMULANDO VALIDACI√ìN AGRESIVA ===');
  
  // Simular el mapeo que devuelve la IA
  let columnMapping = {
    tipo: mapeoProblematico.tipo || '',
    modelo: mapeoProblematico.modelo || '',
    precio: mapeoProblematico.precio_ars || '',
    descripcion: mapeoProblematico.descripcion || '',
    proveedor: mapeoProblematico.proveedor || ''
  };
  
  console.log('üîß RESULTADO INICIAL:', columnMapping);
  
  // ============================================================================
  // VALIDACI√ìN AGRESIVA: FORZAR COLUMNAS CORRECTAS
  // ============================================================================
  console.log('\nüîç === VALIDACI√ìN AGRESIVA: FORZAR COLUMNAS CORRECTAS ===');
  
  // Validar y corregir precio - FORZAR "PVP Off Line" si existe
  if (datos[0]) {
    const pvpOffLineColumn = headers.find(h => h && h.toLowerCase().includes('pvp off line'))
    if (pvpOffLineColumn) {
      const valorPrecio = datos[0][headers.indexOf(pvpOffLineColumn)]
      console.log(`üîç FORZANDO PRECIO: Columna '${pvpOffLineColumn}' contiene: '${valorPrecio}'`)
      
      // Verificar que contiene un precio v√°lido (no un c√≥digo)
      if (typeof valorPrecio === 'string' && valorPrecio.includes('$')) {
        columnMapping.precio = pvpOffLineColumn
        console.log(`‚úÖ Precio forzado a: "${pvpOffLineColumn}"`)
      } else {
        console.log(`‚ùå La columna PVP Off Line no contiene precio v√°lido`)
      }
    } else {
      console.log(`‚ùå No se encontr√≥ columna "PVP Off Line"`)
    }
  }
  
  // Validar y corregir modelo - FORZAR "CODIGO" si existe
  if (datos[0]) {
    const codigoColumn = headers.find(h => h && h.toLowerCase().includes('codigo'))
    if (codigoColumn) {
      const valorModelo = datos[0][headers.indexOf(codigoColumn)]
      console.log(`üîç FORZANDO MODELO: Columna '${codigoColumn}' contiene: '${valorModelo}'`)
      
      // Verificar que contiene un c√≥digo v√°lido
      if (typeof valorModelo === 'string' && valorModelo.match(/^[A-Z]\d+$/)) {
        columnMapping.modelo = codigoColumn
        console.log(`‚úÖ Modelo forzado a: "${codigoColumn}"`)
      } else {
        console.log(`‚ùå La columna CODIGO no contiene c√≥digo v√°lido`)
      }
    } else {
      console.log(`‚ùå No se encontr√≥ columna "CODIGO"`)
    }
  }
  
  // Validar y corregir tipo - FORZAR "RUBRO" si existe
  if (datos[0]) {
    const rubroColumn = headers.find(h => h && h.toLowerCase().includes('rubro'))
    if (rubroColumn) {
      columnMapping.tipo = rubroColumn
      console.log(`‚úÖ Tipo forzado a: "${rubroColumn}"`)
    }
  }
  
  // Validar y corregir descripcion - FORZAR "DESCRIPCION" si existe
  if (datos[0]) {
    const descripcionColumn = headers.find(h => h && h.toLowerCase().includes('descripcion'))
    if (descripcionColumn) {
      columnMapping.descripcion = descripcionColumn
      console.log(`‚úÖ Descripci√≥n forzada a: "${descripcionColumn}"`)
    }
  }
  
  // Validar y corregir proveedor - FORZAR "MARCA" si existe
  if (datos[0]) {
    const marcaColumn = headers.find(h => h && h.toLowerCase().includes('marca'))
    if (marcaColumn) {
      columnMapping.proveedor = marcaColumn
      console.log(`‚úÖ Proveedor forzado a: "${marcaColumn}"`)
    }
  }
  
  console.log('üîß RESULTADO DESPU√âS DE VALIDACI√ìN AGRESIVA:', columnMapping);
  
  // ============================================================================
  // SIMULAR LA SEGUNDA VALIDACI√ìN (l√≠nea 741) QUE SOBRESCRIBE
  // ============================================================================
  console.log('\nüîç === SEGUNDA VALIDACI√ìN (l√≠nea 741) - ESTA SOBRESCRIBE ===');
  
  // üö® VALIDACI√ìN CR√çTICA: Verificar que precio no est√© mapeado a c√≥digo
  if (columnMapping.precio && datos[0]) {
    const valorPrecio = datos[0][headers.indexOf(columnMapping.precio)]
    console.log(`üîç VALIDACI√ìN PRECIO: Columna '${columnMapping.precio}' contiene: '${valorPrecio}'`)
    if (typeof valorPrecio === 'string' && valorPrecio.match(/^[A-Z]\d+$/)) {
      console.log(`‚ùå ERROR: La columna de precio est√° mapeada a un c√≥digo! Ignorando...`)
      columnMapping.precio = ''
    }
  }
  
  console.log('üîß RESULTADO DESPU√âS DE SEGUNDA VALIDACI√ìN:', columnMapping);
  
  // ============================================================================
  // RESULTADO FINAL
  // ============================================================================
  console.log('\nüéØ === RESULTADO FINAL ===');
  
  // Verificar si el precio est√° correcto
  if (columnMapping.precio === 'PVP Off Line') {
    console.log('‚úÖ ¬°PERFECTO! El precio est√° mapeado correctamente a "PVP Off Line"');
  } else if (columnMapping.precio === '') {
    console.log('‚ùå PROBLEMA: El precio fue eliminado por la segunda validaci√≥n!');
    console.log('   Esto es lo que est√° pasando en producci√≥n');
  } else {
    console.log('‚ùå PROBLEMA: El precio no est√° mapeado correctamente');
    console.log('   Esperado: "PVP Off Line"');
    console.log('   Obtenido:', columnMapping.precio);
  }
  
  // Verificar si el modelo est√° correcto
  if (columnMapping.modelo === 'CODIGO') {
    console.log('‚úÖ ¬°PERFECTO! El modelo est√° mapeado correctamente a "CODIGO"');
  } else {
    console.log('‚ùå PROBLEMA: El modelo no est√° mapeado correctamente');
    console.log('   Esperado: "CODIGO"');
    console.log('   Obtenido:', columnMapping.modelo);
  }
  
} catch (error) {
  console.error('‚ùå Error general:', error.message);
}
