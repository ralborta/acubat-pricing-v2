const XLSX = require('xlsx');
const OpenAI = require('openai');

console.log('üîç TEST PROMPT EXACTO - Emulando IA con prompt de producci√≥n...\n');

try {
  // Leer el archivo Excel
  const workbook = XLSX.readFile('./archivo_analisis.xlsx');
  const worksheet = workbook.Sheets['LISTA DE PRECIOS HM N¬∞9'];
  
  // Convertir a JSON
  const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
  
  // Encontrar headers (fila 2)
  const headers = jsonData[1]; // Fila 2 (√≠ndice 1)
  console.log('üìã Headers encontrados:', headers);
  
  // Obtener datos de muestra (primeras 10 filas de datos)
  const datos = jsonData.slice(2, 12); // Filas 3-12 (10 filas de datos)
  console.log('üìä Datos de muestra (10 filas):', datos);
  
  // ============================================================================
  // USAR EL PROMPT EXACTO DEL C√ìDIGO DE PRODUCCI√ìN
  // ============================================================================
  console.log('\nü§ñ === EMULANDO IA CON PROMPT EXACTO DE PRODUCCI√ìN ===');
  
  // Crear cliente de OpenAI
  const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY || 'sk-test'
  });
  
  // Usar el PROMPT EXACTO del c√≥digo de producci√≥n (copiado l√≠nea por l√≠nea)
  const contexto = `
    Eres especialista senior en pricing de bater√≠as automotrices en Argentina.
    Usa √∫nicamente las COLUMNAS y la MUESTRA provistas en este turno (ignora cualquier conocimiento previo).
    Debes mapear exactamente qu√© columna corresponde a:
    tipo (familia/categor√≠a: p.ej. "Bater√≠a", "Ca Ag Blindada", "J.I.S.")
    modelo (c√≥digo identificador: p.ej. "M18FD", "M20GD", "M22ED")
    precio_ars (precio en pesos argentinos - columna "Contado" tiene prioridad)
    descripcion (descripci√≥n comercial del producto)
    proveedor (nombre del proveedor/fabricante: p.ej. "Moura", "Varta", "Bosch", "ACDelco")
    
    REGLAS OBLIGATORIAS:
    - Devuelve SOLO nombres de columnas, NO valores de datos
    - Moneda ARS solamente. En Argentina, "$" es ARS. Rechaza columnas con USD, U$S, US$, "d√≥lar" o mezcla de monedas. No conviertas.
    
    PRECIO (prioridad espec√≠fica):
    1. Busca columna "PVP Off Line" - esta es la columna de precio base principal
    2. Si no existe "PVP Off Line", busca: "Contado", precio, precio lista, pvp, sugerido proveedor, lista, AR$, ARS, $ (sin USD)
    3. Contenido: valores num√©ricos con formato $XXX,XX (pesos argentinos)
    4. Ejemplos v√°lidos: $124,99, $122,99, $131,99, $137,99
    5. DEVUELVE EL NOMBRE DE LA COLUMNA, NO EL VALOR
    
    TIPO (prioridad):
    1. Busca columna "RUBRO" o similar
    2. Contenido: descripciones como "HTAS. MANUALES", "COMBINADAS"
    3. Si no existe, usa "RUBRO" como valor por defecto
    4. DEVUELVE EL NOMBRE DE LA COLUMNA, NO EL VALOR
    
    MODELO (prioridad):
    1. Busca columna "CODIGO" o similar
    2. Contenido: c√≥digos como "L3000", "L3001", "L3002"
    3. Si no existe, usa el primer identificador disponible
    4. DEVUELVE EL NOMBRE DE LA COLUMNA, NO EL VALOR
    
    DESCRIPCION:
    1. Busca columna "DESCRIPCION" o similar
    2. Contenido: descripciones detalladas del producto
    3. DEVUELVE EL NOMBRE DE LA COLUMNA, NO EL VALOR
    
    PROVEEDOR (NUEVO):
    1. Busca columna "MARCA" o similar
    2. Contenido: marcas como "LUSQTOFF", "MOURA", "VARTA"
    3. Si no existe columna espec√≠fica, analiza el nombre del producto para extraer la marca
    4. DEVUELVE EL NOMBRE DE LA COLUMNA, NO EL VALOR
    
    EJEMPLO DE RESPUESTA CORRECTA:
    {
      "tipo": "RUBRO",
      "modelo": "CODIGO", 
      "precio_ars": "PVP Off Line",
      "descripcion": "DESCRIPCION",
      "proveedor": "MARCA"
    }
    
    ‚ö†Ô∏è CR√çTICO: NUNCA devuelvas valores como "L3000", "$ 2.690", "LUSQTOFF". 
    ‚ö†Ô∏è SIEMPRE devuelve NOMBRES DE COLUMNAS como "CODIGO", "PVP Off Line", "MARCA".
    
    Salida estricta: responde solo con JSON que cumpla el schema provisto (sin texto extra, sin markdown, sin backticks).
    
    COLUMNAS: ${headers.join(', ')}
    MUESTRA (hasta 10 filas reales):
    ${JSON.stringify(datos.slice(0, 10), null, 2)}
    
    Responde SOLO con este JSON simple:
    {
      "tipo": "nombre_columna",
      "modelo": "nombre_columna", 
      "precio": "nombre_columna",
      "contado": "nombre_columna",
      "descripcion": "nombre_columna",
      "proveedor": "nombre_columna_o_analisis"
    }
  `;
  
  console.log('üìù Enviando prompt EXACTO de producci√≥n a OpenAI...');
  console.log('üîë API Key:', process.env.OPENAI_API_KEY ? 'Configurada' : 'NO configurada');
  
  // Hacer la llamada real a OpenAI
  openai.chat.completions.create({
    model: 'gpt-4o-mini',
    messages: [
      {
        role: 'system',
        content: contexto
      }
    ],
    temperature: 0.1,
    max_tokens: 1000
  }).then(response => {
    console.log('\nü§ñ === RESPUESTA DE LA IA CON PROMPT DE PRODUCCI√ìN ===');
    console.log('üìù Respuesta cruda:', response.choices[0].message.content);
    
    try {
      // Limpiar la respuesta de la IA (quitar backticks y markdown)
      let respuestaLimpia = response.choices[0].message.content.trim()
      if (respuestaLimpia.startsWith('```json')) {
        respuestaLimpia = respuestaLimpia.replace(/^```json\s*/, '').replace(/\s*```$/, '')
      } else if (respuestaLimpia.startsWith('```')) {
        respuestaLimpia = respuestaLimpia.replace(/^```\s*/, '').replace(/\s*```$/, '')
      }
      
      console.log('üßπ Respuesta limpia:', respuestaLimpia);
      
      // Parsear la respuesta
      let mapeo = JSON.parse(respuestaLimpia);
      console.log('üß† GPT analiz√≥ el archivo:', mapeo);
      
      // ============================================================================
      // ANALIZAR LA RESPUESTA DE LA IA
      // ============================================================================
      console.log('\nüîç === AN√ÅLISIS DE LA RESPUESTA DE LA IA ===');
      
      // Verificar si devolvi√≥ nombres de columnas o valores
      console.log('üìä An√°lisis de cada campo:');
      
      // Analizar tipo
      if (mapeo.tipo) {
        const esNombreColumna = headers.includes(mapeo.tipo)
        console.log(`   - tipo: "${mapeo.tipo}" ${esNombreColumna ? '‚úÖ (nombre de columna)' : '‚ùå (valor, no nombre de columna)'}`)
      }
      
      // Analizar modelo
      if (mapeo.modelo) {
        const esNombreColumna = headers.includes(mapeo.modelo)
        console.log(`   - modelo: "${mapeo.modelo}" ${esNombreColumna ? '‚úÖ (nombre de columna)' : '‚ùå (valor, no nombre de columna)'}`)
      }
      
      // Analizar precio_ars
      if (mapeo.precio_ars) {
        const esNombreColumna = headers.includes(mapeo.precio_ars)
        console.log(`   - precio_ars: "${mapeo.precio_ars}" ${esNombreColumna ? '‚úÖ (nombre de columna)' : '‚ùå (valor, no nombre de columna)'}`)
      }
      
      // Analizar precio (del JSON simple)
      if (mapeo.precio) {
        const esNombreColumna = headers.includes(mapeo.precio)
        console.log(`   - precio: "${mapeo.precio}" ${esNombreColumna ? '‚úÖ (nombre de columna)' : '‚ùå (valor, no nombre de columna)'}`)
      }
      
      // Analizar descripcion
      if (mapeo.descripcion) {
        const esNombreColumna = headers.includes(mapeo.descripcion)
        console.log(`   - descripcion: "${mapeo.descripcion}" ${esNombreColumna ? '‚úÖ (nombre de columna)' : '‚ùå (valor, no nombre de columna)'}`)
      }
      
      // Analizar proveedor
      if (mapeo.proveedor) {
        const esNombreColumna = headers.includes(mapeo.proveedor)
        console.log(`   - proveedor: "${mapeo.proveedor}" ${esNombreColumna ? '‚úÖ (nombre de columna)' : '‚ùå (valor, no nombre de columna)'}`)
      }
      
      // ============================================================================
      // VERIFICAR SI LA IA DEVOLVI√ì VALORES EN LUGAR DE NOMBRES DE COLUMNAS
      // ============================================================================
      console.log('\nüîç === VERIFICACI√ìN DE VALORES VS NOMBRES DE COLUMNAS ===');
      
      // Verificar si devolvi√≥ c√≥digos como precio
      if (mapeo.precio_ars && mapeo.precio_ars.match(/^[A-Z]\d+$/)) {
        console.log(`‚ùå PROBLEMA: La IA devolvi√≥ un c√≥digo como precio: "${mapeo.precio_ars}"`)
      }
      if (mapeo.precio && mapeo.precio.match(/^[A-Z]\d+$/)) {
        console.log(`‚ùå PROBLEMA: La IA devolvi√≥ un c√≥digo como precio: "${mapeo.precio}"`)
      }
      
      // Verificar si devolvi√≥ precios como valores
      if (mapeo.precio_ars && mapeo.precio_ars.includes('$')) {
        console.log(`‚ùå PROBLEMA: La IA devolvi√≥ un valor de precio: "${mapeo.precio_ars}"`)
      }
      if (mapeo.precio && mapeo.precio.includes('$')) {
        console.log(`‚ùå PROBLEMA: La IA devolvi√≥ un valor de precio: "${mapeo.precio}"`)
      }
      
      // Verificar si devolvi√≥ descripciones como valores
      if (mapeo.descripcion && mapeo.descripcion.includes('(') && mapeo.descripcion.includes(')')) {
        console.log(`‚ùå PROBLEMA: La IA devolvi√≥ una descripci√≥n como valor: "${mapeo.descripcion}"`)
      }
      
      // Verificar si devolvi√≥ marcas como valores
      if (mapeo.proveedor && mapeo.proveedor.match(/^[A-Z]+$/)) {
        console.log(`‚ùå PROBLEMA: La IA devolvi√≥ una marca como valor: "${mapeo.proveedor}"`)
      }
      
      // ============================================================================
      // RESULTADO FINAL
      // ============================================================================
      console.log('\nüéØ === RESULTADO FINAL ===');
      
      const problemas = []
      if (mapeo.precio_ars && !headers.includes(mapeo.precio_ars)) problemas.push('precio_ars no es nombre de columna')
      if (mapeo.precio && !headers.includes(mapeo.precio)) problemas.push('precio no es nombre de columna')
      if (mapeo.modelo && !headers.includes(mapeo.modelo)) problemas.push('modelo no es nombre de columna')
      if (mapeo.tipo && !headers.includes(mapeo.tipo)) problemas.push('tipo no es nombre de columna')
      if (mapeo.descripcion && !headers.includes(mapeo.descripcion)) problemas.push('descripcion no es nombre de columna')
      if (mapeo.proveedor && !headers.includes(mapeo.proveedor)) problemas.push('proveedor no es nombre de columna')
      
      if (problemas.length === 0) {
        console.log('‚úÖ ¬°PERFECTO! La IA devolvi√≥ solo nombres de columnas')
      } else {
        console.log('‚ùå PROBLEMAS ENCONTRADOS:')
        problemas.forEach(p => console.log(`   - ${p}`))
      }
      
    } catch (parseError) {
      console.error('‚ùå Error parseando respuesta de la IA:', parseError);
      console.log('üìù Respuesta cruda:', response.choices[0].message.content);
    }
    
  }).catch(error => {
    console.error('‚ùå Error llamando a OpenAI:', error.message);
    if (error.message.includes('API key')) {
      console.log('üí° Sugerencia: Configura OPENAI_API_KEY en tu .env');
    }
  });
  
} catch (error) {
  console.error('‚ùå Error general:', error.message);
}
