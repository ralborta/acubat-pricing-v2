const XLSX = require('xlsx');
const OpenAI = require('openai');

console.log('üîç TEST DEBUG PROFUNDO - Encontrando exactamente d√≥nde est√° el problema...\n');

try {
  // Leer el archivo Excel
  const workbook = XLSX.readFile('./archivo_analisis.xlsx');
  const worksheet = workbook.Sheets['LISTA DE PRECIOS HM N¬∞9'];
  
  // Convertir a JSON
  const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
  
  // Encontrar headers (fila 2)
  const headers = jsonData[1]; // Fila 2 (√≠ndice 1)
  console.log('üìã Headers encontrados:', headers);
  
  // Obtener datos de muestra (primeras 5 filas de datos)
  const datos = jsonData.slice(2, 7); // Filas 3-7 (5 filas de datos)
  console.log('üìä Datos de muestra (5 filas):', datos);
  
  // ============================================================================
  // SIMULAR EXACTAMENTE EL FLUJO COMPLETO
  // ============================================================================
  console.log('\nü§ñ === SIMULANDO FLUJO COMPLETO ===');
  
  // Crear cliente de OpenAI
  const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY || 'sk-test'
  });
  
  // Usar el PROMPT EXACTO del c√≥digo de producci√≥n
  const contexto = `
    Eres especialista senior en pricing de bater√≠as automotrices en Argentina.
    Usa √∫nicamente las COLUMNAS y la MUESTRA provistas en este turno (ignora cualquier conocimiento previo).
    Debes mapear exactamente qu√© columna corresponde a:
    tipo (familia/categor√≠a: p.ej. "Bater√≠a", "Ca Ag Blindada", "J.I.S.")
    modelo (c√≥digo identificador: p.ej. "M18FD", "M20GD", "M22ED")
    precio_ars (precio en pesos argentinos - columna "Contado" tiene prioridad)
    descripcion (descripci√≥n comercial del producto)
    proveedor (nombre del proveedor/fabricante: p.ej. "Moura", "Varta", "Bosch", "ACDelco")
    
    REGLAS OBLIGATORIAS:
    - Devuelve SOLO nombres de columnas, NO valores de datos
    - Moneda ARS solamente. En Argentina, "$" es ARS. Rechaza columnas con USD, U$S, US$, "d√≥lar" o mezcla de monedas. No conviertas.
    
    PRECIO (prioridad espec√≠fica):
    1. Busca columna "PVP Off Line" - esta es la columna de precio base principal
    2. Si no existe "PVP Off Line", busca: "Contado", precio, precio lista, pvp, sugerido proveedor, lista, AR$, ARS, $ (sin USD)
    3. Contenido: valores num√©ricos con s√≠mbolo $ y formato argentino (punto para miles, coma para decimales)
    4. Ejemplos v√°lidos: $ 2.690, $ 4.490, $ 1.256,33, $ 2.500,50
    5. IMPORTANTE: Los valores se redondean (sin decimales) para el procesamiento
    6. DEVUELVE EL NOMBRE DE LA COLUMNA, NO EL VALOR
    
    TIPO (prioridad):
    1. Busca columna "RUBRO" o similar
    2. Contenido: descripciones como "HTAS. MANUALES", "COMBINADAS"
    3. Si no existe, usa "RUBRO" como valor por defecto
    4. DEVUELVE EL NOMBRE DE LA COLUMNA, NO EL VALOR
    
    MODELO (prioridad):
    1. Busca columna "CODIGO" o similar
    2. Contenido: c√≥digos como "L3000", "L3001", "L3002"
    3. Si no existe, usa el primer identificador disponible
    4. DEVUELVE EL NOMBRE DE LA COLUMNA, NO EL VALOR
    
    DESCRIPCION:
    1. Busca columna "DESCRIPCION" o similar
    2. Contenido: descripciones detalladas del producto
    3. DEVUELVE EL NOMBRE DE LA COLUMNA, NO EL VALOR
    
    PROVEEDOR (NUEVO):
    1. Busca columna "MARCA" o similar
    2. Contenido: marcas como "LUSQTOFF", "MOURA", "VARTA"
    3. Si no existe columna espec√≠fica, analiza el nombre del producto para extraer la marca
    4. DEVUELVE EL NOMBRE DE LA COLUMNA, NO EL VALOR
    
    EJEMPLO DE RESPUESTA CORRECTA:
    {
      "tipo": "RUBRO",
      "modelo": "CODIGO", 
      "precio_ars": "PVP Off Line",
      "descripcion": "DESCRIPCION",
      "proveedor": "MARCA"
    }
    
    ‚ö†Ô∏è CR√çTICO: NUNCA devuelvas valores como "L3000", "$ 2.690", "LUSQTOFF". 
    ‚ö†Ô∏è SIEMPRE devuelve NOMBRES DE COLUMNAS como "CODIGO", "PVP Off Line", "MARCA".
    
    Salida estricta: responde solo con JSON que cumpla el schema provisto (sin texto extra, sin markdown, sin backticks).
    
    COLUMNAS: ${headers.join(', ')}
    MUESTRA (hasta 10 filas reales):
    ${JSON.stringify(datos.slice(0, 10), null, 2)}
    
    Responde SOLO con este JSON simple:
    {
      "tipo": "nombre_columna",
      "modelo": "nombre_columna", 
      "precio": "nombre_columna",
      "contado": "nombre_columna",
      "descripcion": "nombre_columna",
      "proveedor": "nombre_columna_o_analisis"
    }
  `;
  
  console.log('üìù Enviando prompt a OpenAI...');
  
  // Hacer la llamada real a OpenAI
  openai.chat.completions.create({
    model: 'gpt-4o-mini',
    messages: [
      {
        role: 'system',
        content: contexto
      }
    ],
    temperature: 0.1,
    max_tokens: 1000
  }).then(response => {
    console.log('\nü§ñ === RESPUESTA DE LA IA ===');
    console.log('üìù Respuesta cruda:', response.choices[0].message.content);
    
    try {
      // Limpiar la respuesta de la IA
      let respuestaLimpia = response.choices[0].message.content.trim()
      if (respuestaLimpia.startsWith('```json')) {
        respuestaLimpia = respuestaLimpia.replace(/^```json\s*/, '').replace(/\s*```$/, '')
      } else if (respuestaLimpia.startsWith('```')) {
        respuestaLimpia = respuestaLimpia.replace(/^```\s*/, '').replace(/\s*```$/, '')
      }
      
      // Parsear la respuesta
      let mapeo = JSON.parse(respuestaLimpia);
      console.log('üß† GPT analiz√≥ el archivo:', mapeo);
      
      // ============================================================================
      // SIMULAR EL PROCESAMIENTO DEL C√ìDIGO DE PRODUCCI√ìN
      // ============================================================================
      console.log('\nüîç === SIMULANDO PROCESAMIENTO DEL C√ìDIGO DE PRODUCCI√ìN ===');
      
      // Simular el mapeo que devuelve la IA
      let columnMapping = {
        tipo: mapeo.tipo || '',
        modelo: mapeo.modelo || '',
        precio: mapeo.precio || mapeo.precio_ars || '',
        descripcion: mapeo.descripcion || '',
        proveedor: mapeo.proveedor || ''
      };
      
      console.log('üîß RESULTADO INICIAL DE LA IA:', columnMapping);
      
      // ============================================================================
      // VALIDACI√ìN AGRESIVA: FORZAR COLUMNAS CORRECTAS
      // ============================================================================
      console.log('\nüîç === VALIDACI√ìN AGRESIVA: FORZAR COLUMNAS CORRECTAS ===');
      
      // Validar y corregir precio - FORZAR "PVP Off Line" si existe
      if (datos[0]) {
        const pvpOffLineColumn = headers.find(h => h && h.toLowerCase().includes('pvp off line'))
        if (pvpOffLineColumn) {
          const valorPrecio = datos[0][headers.indexOf(pvpOffLineColumn)]
          console.log(`üîç FORZANDO PRECIO: Columna '${pvpOffLineColumn}' contiene: '${valorPrecio}'`)
          
          if (typeof valorPrecio === 'string' && valorPrecio.includes('$')) {
            columnMapping.precio = pvpOffLineColumn
            console.log(`‚úÖ Precio forzado a: "${pvpOffLineColumn}"`)
          } else {
            console.log(`‚ùå La columna PVP Off Line no contiene precio v√°lido`)
          }
        } else {
          console.log(`‚ùå No se encontr√≥ columna "PVP Off Line"`)
        }
      }
      
      // Validar y corregir modelo - FORZAR "CODIGO" si existe
      if (datos[0]) {
        const codigoColumn = headers.find(h => h && h.toLowerCase().includes('codigo'))
        if (codigoColumn) {
          const valorModelo = datos[0][headers.indexOf(codigoColumn)]
          console.log(`üîç FORZANDO MODELO: Columna '${codigoColumn}' contiene: '${valorModelo}'`)
          
          if (typeof valorModelo === 'string' && valorModelo.match(/^[A-Z]\d+$/)) {
            columnMapping.modelo = codigoColumn
            console.log(`‚úÖ Modelo forzado a: "${codigoColumn}"`)
          } else {
            console.log(`‚ùå La columna CODIGO no contiene c√≥digo v√°lido`)
          }
        } else {
          console.log(`‚ùå No se encontr√≥ columna "CODIGO"`)
        }
      }
      
      // Validar y corregir tipo - FORZAR "RUBRO" si existe
      if (datos[0]) {
        const rubroColumn = headers.find(h => h && h.toLowerCase().includes('rubro'))
        if (rubroColumn) {
          columnMapping.tipo = rubroColumn
          console.log(`‚úÖ Tipo forzado a: "${rubroColumn}"`)
        }
      }
      
      // Validar y corregir descripcion - FORZAR "DESCRIPCION" si existe
      if (datos[0]) {
        const descripcionColumn = headers.find(h => h && h.toLowerCase().includes('descripcion'))
        if (descripcionColumn) {
          columnMapping.descripcion = descripcionColumn
          console.log(`‚úÖ Descripci√≥n forzada a: "${descripcionColumn}"`)
        }
      }
      
      // Validar y corregir proveedor - FORZAR "MARCA" si existe
      if (datos[0]) {
        const marcaColumn = headers.find(h => h && h.toLowerCase().includes('marca'))
        if (marcaColumn) {
          columnMapping.proveedor = marcaColumn
          console.log(`‚úÖ Proveedor forzado a: "${marcaColumn}"`)
        }
      }
      
      console.log('üîß RESULTADO DESPU√âS DE VALIDACI√ìN AGRESIVA:', columnMapping);
      
      // ============================================================================
      // SIMULAR EL PROCESAMIENTO DE PRODUCTOS CON DEBUG EXTREMO
      // ============================================================================
      console.log('\nüîç === SIMULANDO PROCESAMIENTO DE PRODUCTOS CON DEBUG EXTREMO ===');
      
      // Procesar los primeros 3 productos como ejemplo
      for (let i = 0; i < Math.min(3, datos.length); i++) {
        const producto = datos[i];
        console.log(`\nüì¶ PRODUCTO ${i + 1}:`);
        console.log(`   - Datos del producto:`, producto);
        
        // Extraer datos usando el mapeo CORREGIDO
        const tipo = columnMapping.tipo ? producto[headers.indexOf(columnMapping.tipo)] : 'BATERIA'
        const modelo = columnMapping.modelo ? producto[headers.indexOf(columnMapping.modelo)] : 'N/A'
        const descripcion = columnMapping.descripcion ? producto[headers.indexOf(columnMapping.descripcion)] : modelo
        const proveedor = columnMapping.proveedor ? producto[headers.indexOf(columnMapping.proveedor)] : 'Sin Marca'
        
        console.log(`   - Tipo: "${tipo}" (columna: ${columnMapping.tipo}, √≠ndice: ${headers.indexOf(columnMapping.tipo)})`)
        console.log(`   - Modelo: "${modelo}" (columna: ${columnMapping.modelo}, √≠ndice: ${headers.indexOf(columnMapping.modelo)})`)
        console.log(`   - Descripci√≥n: "${descripcion}" (columna: ${columnMapping.descripcion}, √≠ndice: ${headers.indexOf(columnMapping.descripcion)})`)
        console.log(`   - Proveedor: "${proveedor}" (columna: ${columnMapping.proveedor}, √≠ndice: ${headers.indexOf(columnMapping.proveedor)})`)
        
        // ============================================================================
        // SIMULAR LA B√öSQUEDA DE PRECIO CON DEBUG EXTREMO
        // ============================================================================
        console.log(`\nüí∞ B√öSQUEDA DE PRECIO DEL PRODUCTO ${i + 1}:`);
        console.log(`üîç Mapeo de columnas disponible:`, columnMapping);
        
        let precioBase = 0;
        
        // Simular la l√≥gica de b√∫squeda de precio
        const columnasPrecio = [
          { key: 'pvp_off_line', value: columnMapping.precio },
          { key: 'contado', value: columnMapping.contado },
          { key: 'precio', value: columnMapping.precio },
          { key: 'pdv', value: columnMapping.pdv },
          { key: 'pvp', value: columnMapping.pvp }
        ].filter(col => col.value);
        
        console.log(`üîç Columnas de precio a buscar:`, columnasPrecio);
        
        for (const columna of columnasPrecio) {
          if (!columna.value) continue;
          
          const valor = producto[headers.indexOf(columna.value)];
          console.log(`üîç Buscando en '${columna.key}' (${columna.value}): ${valor}`);
          console.log(`üîç Tipo de valor: ${typeof valor}, Es string: ${typeof valor === 'string'}`);
          
          // Validaci√≥n adicional: Verificar que no sea un c√≥digo
          if (typeof valor === 'string' && valor.match(/^[A-Z]\d+$/)) {
            console.log(`‚ùå IGNORANDO valor '${valor}' porque parece ser un c√≥digo (formato: letra + n√∫meros)`);
            continue;
          }
          
          if (valor !== undefined && valor !== null && valor !== '') {
            // Limpiar valor
            let valorLimpio = String(valor)
              .replace(/\$/g, '')
              .replace(/[^\d.,]/g, '')
              .trim();
            
            console.log(`üîç Valor original: "${valor}" -> Valor limpio: "${valorLimpio}"`);
            
            // Intentar parsear como n√∫mero
            let precio = parseFloat(valorLimpio);
            
            // Detecci√≥n de formato argentino
            if (!isNaN(precio)) {
              if (valorLimpio.includes('.') && valorLimpio.split('.')[1] && valorLimpio.split('.')[1].length === 3) {
                const valorArgentino = valorLimpio.replace('.', '');
                precio = parseFloat(valorArgentino);
                console.log(`üîç Formato argentino detectado: ${valorLimpio} -> ${valorArgentino} -> ${precio}`);
              }
            }
            
            if (!isNaN(precio) && precio > 0) {
              precioBase = precio;
              console.log(`‚úÖ Precio encontrado en '${columna.key}' (${columna.value}): ${precioBase}`);
              break;
            }
          }
        }
        
        console.log(`üí∞ PRECIO BASE FINAL: ${precioBase}`);
        
        // Verificar si el precio es v√°lido
        if (precioBase > 0) {
          console.log(`‚úÖ Precio v√°lido: ${precioBase}`);
        } else {
          console.log(`‚ùå PROBLEMA: No se encontr√≥ precio v√°lido`);
        }
      }
      
    } catch (parseError) {
      console.error('‚ùå Error parseando respuesta de la IA:', parseError);
      console.log('üìù Respuesta cruda:', response.choices[0].message.content);
    }
    
  }).catch(error => {
    console.error('‚ùå Error llamando a OpenAI:', error.message);
  });
  
} catch (error) {
  console.error('‚ùå Error general:', error.message);
}
